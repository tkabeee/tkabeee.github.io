!function(t){var e={};function s(i){if(e[i])return e[i].exports;var a=e[i]={i:i,l:!1,exports:{}};return t[i].call(a.exports,a,a.exports,s),a.l=!0,a.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:i})},s.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=0)}([function(t,e,s){"use strict";s.r(e);class i extends Phaser.State{preload(){}create(){this.game.state.start("Preloader",!0,!1)}render(){}}class a extends Phaser.State{preload(){this.load.image("unit","assets/phaser/unit.png"),this.load.image("block","assets/phaser/block.png"),this.load.image("bullet","assets/phaser/bullet.png"),this.load.spritesheet("kaboom","assets/phaser/explosion.png",64,64,23)}create(){this.game.state.start("Build",!0,!1)}}class r{}r.numTotal=8;class o{}o.angle=-90,o.direction=!0,o.point=new Phaser.Point,o.maxVelocity=200,o.currentSpeed=0,o.deceleration=4,o.rotationAngle=4;class n{constructor(t){this.state={},this.sprite=t,this.sprite.anchor.setTo(.5,.5),this.sprite.x=250,this.sprite.y=400;const e=new Phaser.Rectangle(0,32,32,32);this.sprite.crop(e,!1),this.sprite.body.drag.set(.2),this.sprite.body.maxVelocity.setTo(400,400),this.sprite.body.collideWorldBounds=!0,this.sprite.bringToTop(),this.sprite.angle=o.angle,this.state={angle:o.angle,direction:o.direction,point:new Phaser.Point,currentSpeed:o.currentSpeed}}goReady(){this.state.currentSpeed>0?this.state.maxVelocity%2<this.state.currentSpeed?this.state.currentSpeed-=3*this.state.deceleration:this.state.currentSpeed-=o.deceleration:(this.state.currentSpeed=0,this.state.direction=!this.state.direction)}goFront(){this.state.direction?(this.state.angle=this.sprite.angle,this.state.currentSpeed<o.maxVelocity?this.state.currentSpeed+=o.deceleration:this.state.currentSpeed=o.maxVelocity):(this.state.angle=this.sprite.angle-180,this.goReady()),this.state.point=this.sprite.body.velocity.rotate(0,0,this.state.angle,!0,this.state.currentSpeed),console.log(`angle: ${this.state.angle}`),console.log(`sprite.angle: ${this.sprite.angle}`),console.log(`speed: ${this.state.currentSpeed}`),console.log(`point: ${this.state.point}`)}goBack(){this.state.direction?(this.state.angle=this.sprite.angle,this.goReady()):(this.state.angle=this.sprite.angle-180,this.state.currentSpeed<o.maxVelocity?this.state.currentSpeed+=o.deceleration:this.state.currentSpeed=o.maxVelocity),this.state.point=this.sprite.body.velocity.rotate(0,0,this.state.angle,!0,this.state.currentSpeed)}rotateRight(){this.state.angle=this.sprite.angle+=o.rotationAngle,this.state.currentSpeed<=0||(this.state.direction||(this.state.angle=this.sprite.angle-180),this.sprite.body.velocity.rotate(0,0,this.state.angle,!0,this.state.currentSpeed))}rotateLeft(){this.state.angle=this.sprite.angle-=o.rotationAngle,this.state.currentSpeed<=0||(this.state.direction||(this.state.angle=this.sprite.angle-180),this.sprite.body.velocity.rotate(0,0,this.state.angle,!0,this.state.currentSpeed))}fire(){}}class h{constructor(t){this.health=3,this.alive=!0,this.sprite=t,this.sprite.anchor.set(.5),this.sprite.body.immovable=!0,this.sprite.body.collideWorldBounds=!0,this.sprite.body.bounce.setTo(0,0)}damage(){return this.health-=1,this.health<=0&&(console.log("kill!!"),this.alive=!1,this.sprite.kill(),!0)}}class l extends Phaser.State{preload(){}create(){this.world.setBounds(0,0,600,600);const t=this.game.add.sprite(0,0,"unit");this.game.physics.enable(t,Phaser.Physics.ARCADE),this.unit=new n(t);const e=[];let s=r.numTotal;for(;s>0;){const t=this.game.add.sprite(this.world.randomX,this.world.randomY,"enemy","block");this.game.physics.enable(t,Phaser.Physics.ARCADE);let i=new h(t);e.push(i),s--}this.cursors=this.game.input.keyboard.createCursorKeys();this.game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR)}update(){this.cursors.left.isDown&&this.unit.rotateLeft(),this.cursors.right.isDown&&this.unit.rotateRight(),this.cursors.up.isDown&&this.unit.goFront(),this.cursors.down.isDown&&this.unit.goBack()}}window.onload=(()=>{new class extends Phaser.Game{constructor(){super(600,600,Phaser.AUTO,"field",null),this.state.add("Boot",i,!1),this.state.add("Preloader",a,!1),this.state.add("Build",l,!1),this.state.start("Boot")}}})}]);